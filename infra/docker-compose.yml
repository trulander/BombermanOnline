version: "3.9"
name: bombermanonline-infra
services:
  webapi-service:
    build:
      context: ../services/webapi-service
      dockerfile: Dockerfile
#    command: uv run uvicorn webapi-service.app.main:app --host 0.0.0.0 --port 5001
    volumes:
      - ../services/webapi-service:/app/webapi-service
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
    depends_on:
      - postgres
      - redis
      - nats
    ports:
      - "5001:5001"
    labels:
      - "traefik.enable=true"

  game-service:
    build:
      context: ../services/game-service
      dockerfile: Dockerfile
#    command: uv run --host 0.0.0.0 --port 8001
    volumes:
      - ../services/game-service:/app/game-service
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
    depends_on:
      - redis
      - nats
    ports:
      - "5002:5002"
    labels:
      - "traefik.enable=true"

  web-frontend:
    build:
      context: ../services/web-frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ../services/web-frontend/src:/app/src
    environment:
      - NODE_ENV=development
    labels:
      - "traefik.enable=true"

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-bomberman}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-bomberman}
      - POSTGRES_DB=${POSTGRES_DB:-bomberman}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: redis:7.2
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    environment:
      REDIS_ADDR: redis://redis:6379
    ports: ["9121:9121"]
    depends_on:
      - redis

  nats:
    image: nats:2.10
    ports:
      - "4222:4222"
      - "8222:8222"
    volumes:
      - nats_data:/data

  traefik:
    image: traefik:3.4.0
    ports:
      - "80:80"     # HTTP
      - "8080:8080" # Веб-интерфейс Traefik Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/middlewares.yml:/etc/traefik/middlewares.yml
      - ./traefik/routers.yml:/etc/traefik/routers.yml
      - ./traefik/logs:/var/log/traefik
    command:
      - "--configFile=/etc/traefik/traefik.yml"
    restart: unless-stopped
    depends_on:
      - webapi-service
      - game-service
      - web-frontend
    labels:
      - "traefik.enable=true"

#  kong:
#    image: kong:3.9.0-ubuntu
#    environment:
#      KONG_DATABASE: "postgres"                   # Включаем Postgres
#      KONG_PG_HOST: postgres                     # Имя сервиса Postgres
#      KONG_PG_USER: ${POSTGRES_USER:-bomberman}  # Пользователь Postgres
#      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD:-bomberman}  # Пароль Postgres
#      KONG_PG_DATABASE: ${POSTGRES_DB:-kong}  # Имя базы
##      KONG_DATABASE: "off"                        # DB-less режим
#      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml # точка монтирования конфига
#      KONG_PROXY_LISTEN: "0.0.0.0:8000"           # HTTP порт для клиентов
#      KONG_ADMIN_LISTEN: "0.0.0.0:8001"           # порт для Admin API
#      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8002"       # порт для Kong Manager GUI
#      KONG_LOG_LEVEL: "info"                       # уровень логирования
#    ports:
#      - "8000:8000"
#      - "8001:8001"
#      - "8002:8002"
#    volumes:
#      - ./kong/kong.yml:/etc/kong/kong.yml
#      - ./logs/kong:/var/log/kong  # Добавляем volume для логов
#    depends_on:
#      - postgres
#      - webapi-service
#      - game-service
#
#  kong-migrations:
#    image: kong:3.9.0-ubuntu
#    command: "kong migrations bootstrap -c /etc/kong/kong.yml"
#    environment:
#      KONG_DATABASE: "postgres"                   # Включаем Postgres
#      KONG_PG_HOST: postgres                     # Имя сервиса Postgres
#      KONG_PG_USER: ${POSTGRES_USER:-bomberman}  # Пользователь Postgres
#      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD:-bomberman}  # Пароль Postgres
#      KONG_PG_DATABASE: ${POSTGRES_DB:-kong}  # Имя базы
#      #      KONG_DATABASE: "off"                        # DB-less режим
#      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml # точка монтирования конфига
#      KONG_PROXY_LISTEN: "0.0.0.0:8000"           # HTTP порт для клиентов
#      KONG_ADMIN_LISTEN: "0.0.0.0:8001"           # порт для Admin API
#      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8002"       # порт для Kong Manager GUI
#      KONG_LOG_LEVEL: "info"
#    volumes:
#      - ./kong/kong.yml:/etc/kong/kong.yml
#      - ./logs/kong:/var/log/kong  # Добавляем volume для логов
#    depends_on:
#      - postgres
#
#  kong-config:
#    image: kong:3.9.0-ubuntu
#    user: root  # Запускаем контейнер от имени root
#    command: >
#      /bin/sh -c "
#        luarocks install kong-oidc-auth
#      "
#    environment:
#      KONG_DATABASE: "postgres"
#      KONG_PG_HOST: postgres
#      KONG_PG_USER: ${POSTGRES_USER:-bomberman}
#      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD:-bomberman}
#      KONG_PG_DATABASE: ${POSTGRES_DB:-bomberman}
#    volumes:
#      - ./kong/kong.yml:/etc/kong/kong.yml
#    depends_on:
#      - kong
#      - kong-migrations


volumes:
  postgres_data:
  redis_data:
  nats_data: 
version: "3.9"
name: bombermanonline-infra
services:
  webapi-service:
    build:
      context: ../services/webapi-service
      dockerfile: Dockerfile
#    command: uv run uvicorn webapi-service.app.main:app --host 0.0.0.0 --port 5001
    volumes:
      - ../services/webapi-service:/app/webapi-service
      - webapi_logs:/var/log/webapi-service
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
    depends_on:
      - postgres
      - redis
      - nats
    ports:
      - "5001:5001"
    labels:
      - "traefik.enable=true"
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: docker.webapi-service

  game-service:
    build:
      context: ../services/game-service
      dockerfile: Dockerfile
#    command: uv run --host 0.0.0.0 --port 8001
    volumes:
      - ../services/game-service:/app/game-service
      - game_logs:/var/log/game-service
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
    depends_on:
      - redis
      - nats
    ports:
      - "5002:5002"
    labels:
      - "traefik.enable=true"
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: docker.game-service

  web-frontend:
    build:
      context: ../services/web-frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ../services/web-frontend/src:/app/src
    environment:
      - NODE_ENV=production
      - LOGS_ENDPOINT=/logs
      - SERVICE_NAME=web-frontend
      - SOCKET_URL=http://localhost
      - SOCKET_PATH=/socket.io
      - PORT=3000
      - LOGS_BATCH_SIZE=10
    labels:
      - "traefik.enable=true"

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-bomberman}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-bomberman}
      - POSTGRES_DB=${POSTGRES_DB:-bomberman}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: redis:7.2
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    environment:
      REDIS_ADDR: redis://redis:6379
    ports: ["9121:9121"]
    depends_on:
      - redis

  nats:
    image: nats:2.10
    ports:
      - "4222:4222"
      - "8222:8222"
    volumes:
      - nats_data:/data

  prometheus-nats-exporter:
    image: natsio/prometheus-nats-exporter:latest
    command: "-varz -connz -subz -routez -gatewayz -healthz -accstatz -leafz -jsz=all http://nats:8222"
    ports:
      - "7777:7777"
    depends_on:
      - nats
    restart: unless-stopped

  traefik:
    image: traefik:3.4.0
    ports:
      - "80:80"     # HTTP
      - "8080:8080" # Веб-интерфейс Traefik Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/middlewares.yml:/etc/traefik/middlewares.yml
      - ./traefik/routers.yml:/etc/traefik/routers.yml
      - ./traefik/logs:/var/log/traefik
    command:
      - "--configFile=/etc/traefik/traefik.yml"
    restart: unless-stopped
    depends_on:
      - webapi-service
      - game-service
      - web-frontend
      - fluent-bit
    labels:
      - "traefik.enable=true"

  # Системы мониторинга и логирования
  prometheus:
    image: prom/prometheus:v2.49.1
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  node-exporter:
    image: prom/node-exporter:v1.7.0
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8081:8080"
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.3
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml -target=all -log.level=info
    restart: unless-stopped
    networks:
      default:
        aliases:
          - loki.internal

  fluent-bit:
    image: grafana/fluent-bit-plugin-loki:latest
    volumes:
      - ./fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./fluent-bit/parsers.conf:/fluent-bit/etc/parsers.conf
      - ./fluent-bit/split_logs.lua:/fluent-bit/etc/split_logs.lua
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    ports:
      - "24224:24224"
      - "24224:24224/udp"
      - "2020:2020"
      - "8888:8888"
    environment:
      - LOKI_URL=http://loki.internal:3100/loki/api/v1/push
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - default

  grafana:
    image: grafana/grafana:10.4.0
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_HTTP_PORT=3001
      - GF_DASHBOARDS_MIN_REFRESH_INTERVAL=5s
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    ports:
      - "3001:3001"
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3001"

volumes:
  postgres_data:
  redis_data:
  nats_data:
  prometheus_data:
  loki_data:
  grafana_data:
  webapi_logs:
  game_logs: 